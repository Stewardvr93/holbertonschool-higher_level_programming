::::::::::::
Funcion
::::::::::::
Archivo txt donde se verifican todos los errores posibles
que puden tener  la funci칩n matrix_divided() que 
divide todos los elementos de una matriz.

Importacion del modulo:
::::::::::::::::::::::::::::::::::::

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

:::::::::::::::::::::::::::::::::::: 

Pruebas:
:::::::::::::

1 - Declaramos la matrix y verificamos la funcion matrix_divided()

>>> matrix = [[1, 2, 3],[4, 5, 6]]

>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

2 - Se supone que debe retornar una excepcion ZeroDivisionError

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

3 - Se supone que debe restornar una excepcion TypeError

>>> matrix_divided("Pepe", 9)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

4 - Se supone que debe generar una excepcion ZeroDivisionError

>>> matrix_divided("Pepe", 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

5 - Se supone que debe generar una excepcion TypeError

>>> matrix_divided(matrix, "Pepe")
Traceback (most recent call last):
...
TypeError: div must be a number

6 - Declara una matrix que contiene dos matrixes vacias

>>> matrix = [[], []]

>>> matrix_divided(matrix, 9)
[[], []]

7 - Declaramos la matrix y verificamos la funcion matrix_divided()

>>> matrix = [[1, 2, 3],[4, 5, 6, 9]]

8 - Se supone que debe generar una excepcion TypeError por el tama침o de la matrix

>>> matrix_divided(matrix, 9)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

9 -  Declaramos la matrix vacia.

>>> matrix = []

>>> matrix_divided(matrix, 8)
[]

10 - Se supone que debe generar una excepcion TypeError por pasar una cadena en una posicion de la matrix

>>> matrix = [[1, 2, 3],[4, 5, "Pepe"]]

>>> matrix_divided(matrix, 8)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

11 - Se supone que debe generar una excepcion TypeError por el tama침o de la matrix

>>> matrix = [[1, 2, 3], [4, 5, 9, "Pepe"]]

>>> matrix_divided(matrix, 8)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

12 - Se supone que deberia generar una excepcion TypeError por el tama침o de la matrix

>>> matrix = [[], [4, 5, 9]]

>>> matrix_divided(matrix, 8)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

13 - Se supone que debeberia generar una excepcion TypeError por los datos de la matrix

>>> matrix = [['Pedro', 'Juan', 'Apocalipto'],[4, 5, 6]]

>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

14 - Debe imprimir la matriz con un resultado correspondiente

>>> matrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix_divided(matrix, 3.14)
[[0.32, 0.64, 0.96], [1.27, 1.59, 1.91]]

15 - Se supone que debeberia generar una excepcion TypeError

>>> matrix = [None]

>>> matrix_divided(matrix, 8)
Traceback (most recent call last):
...
TypeError: object of type 'NoneType' has no len()

16 - Se supone que debe retornar el resultado de la division pero se le pasa un negativo en el div.

>>> matrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix_divided(matrix, -9)
[[-0.11, -0.22, -0.33], [-0.44, -0.56, -0.67]]

17 - Se supone que debe retornar el resultado de la division pero cuando div es float('inf) retorna 0.0

>>> matrix = [[1, 2, 3], [4, 5, 6]]

>>> matrix_divided(matrix, float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
